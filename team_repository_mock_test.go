// Code generated by MockGen. DO NOT EDIT.
// Source: team_services.go
//
// Generated by this command:
//
//	mockgen -source=team_services.go -destination=team_service1_test.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockITeamRepository is a mock of ITeamRepository interface.
type MockITeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITeamRepositoryMockRecorder
}

// MockITeamRepositoryMockRecorder is the mock recorder for MockITeamRepository.
type MockITeamRepositoryMockRecorder struct {
	mock *MockITeamRepository
}

// NewMockITeamRepository creates a new mock instance.
func NewMockITeamRepository(ctrl *gomock.Controller) *MockITeamRepository {
	mock := &MockITeamRepository{ctrl: ctrl}
	mock.recorder = &MockITeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITeamRepository) EXPECT() *MockITeamRepositoryMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockITeamRepository) CreateTeam(arg0 *Team) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockITeamRepositoryMockRecorder) CreateTeam(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockITeamRepository)(nil).CreateTeam), arg0)
}

// DeleteTeam mocks base method.
func (m *MockITeamRepository) DeleteTeam(arg0 *Team) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockITeamRepositoryMockRecorder) DeleteTeam(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockITeamRepository)(nil).DeleteTeam), arg0)
}

// GetTeam mocks base method.
func (m *MockITeamRepository) GetTeam(arg0 string, arg1 *Team) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockITeamRepositoryMockRecorder) GetTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockITeamRepository)(nil).GetTeam), arg0, arg1)
}

// GetTeams mocks base method.
func (m *MockITeamRepository) GetTeams(arg0 GetTeamsQueryParams, arg1 *[]Team) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockITeamRepositoryMockRecorder) GetTeams(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockITeamRepository)(nil).GetTeams), arg0, arg1)
}
